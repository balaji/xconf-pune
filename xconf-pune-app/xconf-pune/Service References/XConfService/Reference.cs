//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace xconf_pune.XConfService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="XConfSession", Namespace="http://schemas.datacontract.org/2004/07/XConfPune")]
    public partial class XConfSession : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DayField;
        
        private string PresentersField;
        
        private string TimeSlotField;
        
        private string TopicField;
        
        private int TrackField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Day {
            get {
                return this.DayField;
            }
            set {
                if ((this.DayField.Equals(value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Presenters {
            get {
                return this.PresentersField;
            }
            set {
                if ((object.ReferenceEquals(this.PresentersField, value) != true)) {
                    this.PresentersField = value;
                    this.RaisePropertyChanged("Presenters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeSlot {
            get {
                return this.TimeSlotField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeSlotField, value) != true)) {
                    this.TimeSlotField = value;
                    this.RaisePropertyChanged("TimeSlot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Topic {
            get {
                return this.TopicField;
            }
            set {
                if ((object.ReferenceEquals(this.TopicField, value) != true)) {
                    this.TopicField = value;
                    this.RaisePropertyChanged("Topic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Track {
            get {
                return this.TrackField;
            }
            set {
                if ((this.TrackField.Equals(value) != true)) {
                    this.TrackField = value;
                    this.RaisePropertyChanged("Track");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="XConfService.IXConfService")]
    public interface IXConfService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IXConfService/Fetch", ReplyAction="http://tempuri.org/IXConfService/FetchResponse")]
        System.IAsyncResult BeginFetch(int day, int track, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<xconf_pune.XConfService.XConfSession> EndFetch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IXConfServiceChannel : xconf_pune.XConfService.IXConfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<xconf_pune.XConfService.XConfSession> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<xconf_pune.XConfService.XConfSession>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class XConfServiceClient : System.ServiceModel.ClientBase<xconf_pune.XConfService.IXConfService>, xconf_pune.XConfService.IXConfService {
        
        private BeginOperationDelegate onBeginFetchDelegate;
        
        private EndOperationDelegate onEndFetchDelegate;
        
        private System.Threading.SendOrPostCallback onFetchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public XConfServiceClient() {
        }
        
        public XConfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public XConfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XConfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XConfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<FetchCompletedEventArgs> FetchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult xconf_pune.XConfService.IXConfService.BeginFetch(int day, int track, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetch(day, track, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<xconf_pune.XConfService.XConfSession> xconf_pune.XConfService.IXConfService.EndFetch(System.IAsyncResult result) {
            return base.Channel.EndFetch(result);
        }
        
        private System.IAsyncResult OnBeginFetch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int day = ((int)(inValues[0]));
            int track = ((int)(inValues[1]));
            return ((xconf_pune.XConfService.IXConfService)(this)).BeginFetch(day, track, callback, asyncState);
        }
        
        private object[] OnEndFetch(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<xconf_pune.XConfService.XConfSession> retVal = ((xconf_pune.XConfService.IXConfService)(this)).EndFetch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchCompleted(object state) {
            if ((this.FetchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchCompleted(this, new FetchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchAsync(int day, int track) {
            this.FetchAsync(day, track, null);
        }
        
        public void FetchAsync(int day, int track, object userState) {
            if ((this.onBeginFetchDelegate == null)) {
                this.onBeginFetchDelegate = new BeginOperationDelegate(this.OnBeginFetch);
            }
            if ((this.onEndFetchDelegate == null)) {
                this.onEndFetchDelegate = new EndOperationDelegate(this.OnEndFetch);
            }
            if ((this.onFetchCompletedDelegate == null)) {
                this.onFetchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDelegate, new object[] {
                        day,
                        track}, this.onEndFetchDelegate, this.onFetchCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override xconf_pune.XConfService.IXConfService CreateChannel() {
            return new XConfServiceClientChannel(this);
        }
        
        private class XConfServiceClientChannel : ChannelBase<xconf_pune.XConfService.IXConfService>, xconf_pune.XConfService.IXConfService {
            
            public XConfServiceClientChannel(System.ServiceModel.ClientBase<xconf_pune.XConfService.IXConfService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginFetch(int day, int track, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = day;
                _args[1] = track;
                System.IAsyncResult _result = base.BeginInvoke("Fetch", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<xconf_pune.XConfService.XConfSession> EndFetch(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<xconf_pune.XConfService.XConfSession> _result = ((System.Collections.ObjectModel.ObservableCollection<xconf_pune.XConfService.XConfSession>)(base.EndInvoke("Fetch", _args, result)));
                return _result;
            }
        }
    }
}
